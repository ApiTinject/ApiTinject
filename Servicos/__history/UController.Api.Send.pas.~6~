unit UController.Api.Send;

     interface
uses System.JSON,
     System.Classes,
     System.SysUtils,
     ServerUtils,
     uDWConsts,
     uDWJSONObject,
     UController.Comum;

procedure RegistrarRotas;

procedure Send(Sender: TObject; RequestHeader: TStringList;
                     Const Params: TDWParams; Var ContentType: String;
                     Var Result: String; Const RequestType: TRequestType;
                     Var StatusCode: Integer; Var ErrorMessage: String;
                     Var OutCustomHeader : TStringList);


procedure RotasSend(Sender: TObject; RequestHeader: TStringList;
                     Const Params: TDWParams; Var ContentType: String;
                     Var Result: String; Const RequestType: TRequestType;
                     Var StatusCode: Integer; Var ErrorMessage: String;
                     Var OutCustomHeader : TStringList);

implementation

uses
  UServer, UDao.Api.Send;



procedure RegistrarRotas;
begin
    Form12.RESTDWServerQXID.AddUrl('send', [crGet, crPost], RotasSend, true);
end;

procedure RotasSend(Sender: TObject; RequestHeader: TStringList;
                     Const Params: TDWParams; Var ContentType: String;
                     Var Result: String; Const RequestType: TRequestType;
                     Var StatusCode: Integer; Var ErrorMessage: String;
                     Var OutCustomHeader : TStringList);
begin
    case RequestType of
        rtGet: Send(Sender, RequestHeader, Params, ContentType, Result,
                            RequestType, StatusCode, ErrorMessage, OutCustomHeader);

        rtPost: Send(Sender, RequestHeader, Params, ContentType, Result,
                               RequestType, StatusCode, ErrorMessage, OutCustomHeader);
    end;
end;

procedure Send(Sender: TObject; RequestHeader: TStringList;
                     Const Params: TDWParams; Var ContentType: String;
                     Var Result: String; Const RequestType: TRequestType;
                     Var StatusCode: Integer; Var ErrorMessage: String;
                     Var OutCustomHeader : TStringList);
var
    Chamados: TSendApi;
    busca: string;
    jsonArray: TJSONArray;
    Erro: string;

begin
  try
    try
      Chamados := TSendApi.Create();

      try
        busca := Params.ItemsString['busca'].AsString;
        except
        busca := '';
      end;
      if busca = '' then
      begin
        try
          Chamados.Telefone := Params.ItemsString['0'].AsString;
          // http://localhost:8082/notas/29
        except
          Chamados.telefone := '';
        end;

      end;
      jsonArray := Chamados.Send(Erro, busca);
      if jsonArray.Size = 0 then
        Result := CreateJsonObjStr('erro', Erro)
      else
        Result := jsonArray.ToJSON;
      FreeAndNil(jsonArray);
    except
      on ex: exception do
      begin
        Result := CreateJsonObjStr('erro', ex.Message);
        StatusCode := 500;
      end;
    end;
  finally
    FreeAndNil(Chamados);
  end;
end;



end.
